/*
List of all sub-routines below:

    1) FullLoad_Oracle(parDB_Connection,parDB_Owner,parDB_Table,parDB_WHERE_Clause)
        Sub to load and store on full DB table.
		N.B. The WHERE clause you include must start with 'WHERE [....]'.
    2) FullyAutomatedIncrementalLoad_Oracle(parDB_Connection,parDB_Owner,parDB_Table,parDB_WHERE_Clause,parPrimaryKey,parDateTimeField,parDBTableFieldsChecker_YES)
        Sub to load and store a DB table extracting incrementally and storing only the lastest YYYYMM QVD.
        N.B.    (a) The WHERE clause you include must start with 'AND [....]'. 
		        (b) Key requirements for this sub is the identification of the PRIMARY-KEY
                in the table and the DATE-TIME field to use for incremental loading
                and which will also be the manner in which the script will store YYYYMM QVDs. 
    3) QVDFileNamesList(parQVDTargetFolder,parQVDNamePrefix,parLoadLastNFiles)
        When a folder has been created full of YYYYMM QVDs, load the LIST of files name in reverse-chronological order.
    4) QVDFileNamesLoad(parQVDTargetFolder,parQVDNamePrefix,parLoadLastNFiles,parOPTIONALsubName)
        When a folder has been created full of YYYYMM QVDs, load the QVD FILES in reverse-chronological order.
    999) QVDCreateYMSlicesFromQVD(parSourceQVDFolder,parSourceQVDFile,parTargetFolder,parDateFieldNameToCreateQVDSlices)
        If you have a large QVD with a lot of data, in order to start the process of creating YYYYMM QVDs in an incremental load with the above subs,
        use this sub to start the initial slices of YYYYMM QVDs.

Author: Cheenu Janakiram
Date: 16 May 2021
*/


// 1) FullLoad_Oracle(parDB_Connection,parDB_Owner,parDB_Table,parDB_WHERE_Clause)
/*
Sub-routine parameters:
parDB_Connection			--> LIB Connection to DB.
parDB_Owner					--> Owner/Schema name of the DB.
parDB_Table					--> DB table name.
parDB_WHERE_Clause			--> WHERE-clause: has to start with "WHERE" and all single-quotes must be replaced with "|".

Author:	Cheenu Janakiram
Date:	14 April 2021
*/
sub FullLoad_Oracle(parDB_Connection,parDB_Owner,parDB_Table,parDB_WHERE_Clause)
    //LOOP for extraction of full DB tables
	LET parDB_WHERE_ClauseFinal	= REPLACE('$(parDB_WHERE_Clause)', '|', CHR(39));

	TRACE *** Connecting to database: $(parDB_Connection) ***; 
    TRACE *** To fetch data from table: "$(parDB_Owner)"."$(parDB_Table)" ***;
    TRACE *** With the WHERE-Clause $(parDB_WHERE_ClauseFinal);

	//Database Connection
	LET vScriptStartDB		= NOW();

	LIB CONNECT TO '$(parDB_Connection)';
    //Select STAR of the table
    [$(parDB_Table)]: SELECT * FROM "$(parDB_Owner)"."$(parDB_Table)" $(parDB_WHERE_ClauseFinal);

	LET parDB_NoofRows = NoofRows('$(parDB_Table)');

	LET vScriptEndDB		= NOW();
	LET vScriptDurationDB	= INTERVAL('$(vScriptEndDB)' - '$(vScriptStartDB)', 'HH:mm:ss');

	//Saving the QVD in "4_Extract_QVD"
	LET vScriptStartStore		= NOW();

	STORE [$(parDB_Table)] INTO [lib://Folder_Qlik_Sense_PRD/4_Extract_QVD/$(parDB_Table).qvd] (QVD);
	DROP TABLE [$(parDB_Table)];

	LET vScriptEndStore			= NOW();
	LET vScriptDurationStore	= INTERVAL('$(vScriptEndStore)' - '$(vScriptStartStore)', 'HH:mm:ss');

	TableInfo:
	LOAD
		'$(parDB_Connection)'			as DB_LIB_Connection,
		'$(parDB_Owner)'				as DB_Owner,
		'$(parDB_Table)'				as DB_Table,
		NUM('$(parDB_NoofRows)', '###,###,###,###') as DB_NoofRows,
		'$(parDB_WHERE_ClauseFinal)'	as DB_WhereClause,
		'$(vScriptDurationDB)'			as Extraction_Duration,
		'$(vScriptStartDB)'				as Extraction_Start,
		'$(vScriptEndDB)'				as Extraction_End,
		'$(vScriptDurationStore)'		as Store_Duration,
		'$(vScriptStartStore)'			as Store_Start,
		'$(vScriptEndStore)'			as Store_End
	AUTOGENERATE(1);

end sub;


// 2) FullyAutomatedIncrementalLoad_Oracle(parDB_Connection,parDB_Owner,parDB_Table,parDB_WHERE_Clause,parPrimaryKey,parDateTimeField,parDBTableFieldsChecker_YES)
/*
Sub-routine parameters:
parDB_Connection			--> LIB connection to database.
parDB_Owner					--> Owner/Schema name in the database.
parDB_Table					--> Database table name.
parDB_WHERE_Clause			--> WHERE-clause: should start with "AND" and all single quotes have to be substituted with "|".
parPrimaryKey				--> Primary key in the DB table. This is for a "WHERE NOT(EXISTS(Primary_Key)) to only fetch the latest value of this key in the monthly data.
parDateTimeField			--> Date-Time field on which the incremental is based and for which the script will create YYYYMM slices of data.
parDBTableFieldsChecker_YES	--> YES ou NO: Would you like to rebuild the whole set of QVDs when the database table structure (fields) change?

Author:	Cheenu Janakiram
Date:	12 April 2021
*/
sub FullyAutomatedIncrementalLoad_Oracle(parDB_Connection,parDB_Owner,parDB_Table,parDB_WHERE_Clause,parPrimaryKey,parDateTimeField,parDBTableFieldsChecker_YES)
TRACE ******  Loading the sub-routine for a Fully Automated Incremental Loading.  ******;
SET parQVDTargetFolder = 'LIB://Folder_Qlik_Sense_PRD/4_Extract_QVD';

//Connection to the DB
LET vScriptStartDB		= NOW();

LIB CONNECT TO '$(parDB_Connection)';

//where "parDBTableFieldsChecker_YES" reruns a check on DB table to make sure the QVDs have same structure. Otherwise, if DB
//table structure has changed (new fields), it will rebuild all the YYYYMM QVDs from scratch with the new field(s).
    /*  <----------- 1 - Comparing current Database table structure to earliest YYYYMM QVD available in list/folder ----------->*/ 
    /*
    First we need to cross-compare the structure of the first YYYYMM QVD to the fields in the DB table
    to see if the structure has changed (i.e. if new fields have been added).
    */

    //Get the start-date YYYYMM QVD to check for the table structure/fields in the QVD, if it exists.
    IF '$(parDBTableFieldsChecker_YES)' =  'YES' AND ALT(QvdCreateTime('$(parQVDTargetFolder)/$(parDB_Table)/$(parDB_Table)_$(vStartYearMonth).qvd'), 0) > 0 THEN
    //Fetch full list of existing QVDs
        FOR EACH file IN FileList('$(parQVDTargetFolder)/$(parDB_Table)/$(parDB_Table)_*.qvd')
            FileList_Temp: LOAD '$(file)' as FileList AUTOGENERATE(1);
        NEXT file;

        //Get first QVD in list --> which theoretically is oldest YYYYMM QVD in the list -->> "ORDER BY FileList ASC" below.
        QVDFileNamesList:
        NOCONCATENATE FIRST 1
        LOAD 
            FileList as QVDFileNamesList
        RESIDENT FileList_Temp ORDER BY FileList ASC;
        DROP TABLE FileList_Temp;

        //Store the full path file in a VAR
        LET vQVDFileNamesList = PEEK('QVDFileNamesList', 0, 'QVDFileNamesList');
        DROP TABLE QVDFileNamesList;

        //Get the list of fields in the oldest QVD
        QVD_Fieldnames:
        LOAD
            FieldName as QVD_Fieldnames
        FROM [$(vQVDFileNamesList)]
        (XmlSimple, table is [QvdTableHeader/Fields/QvdFieldHeader]);

        //Get a sample of the table to gather the field names in the DB table as they are right now
        SampleTable: SELECT * FROM "$(parDB_Owner)"."$(parDB_Table)" WHERE ROWNUM < 2;

        //Put all the QVD fieldnames in a table/column
        FOR Fieldnames = 1 TO NoOfFields('SampleTable')
            LET vFieldnames = FieldName($(Fieldnames),'SampleTable');
            Fieldnames: LOAD '$(vFieldnames)' as Fieldnames AUTOGENERATE(1);
        NEXT Fieldnames;

        //Cross-compare DB and QVD fields and see if there are differences
        Field_Comparison:
        LOAD * WHERE Check_Fields = 0;
        LOAD EXISTS(QVD_Fieldnames, Fieldnames) as Check_Fields RESIDENT Fieldnames;

        DROP TABLES QVD_Fieldnames, SampleTable, Fieldnames;
    END IF;


    //If there is data in "Field_Comparison" table AND the "parDBTableFieldsChecker_YES" is set to "YES"
    IF ALT(NoOfRows('Field_Comparison'), 0) > 0 AND '$(parDBTableFieldsChecker_YES)' =  'YES' THEN
        TRACE **** <== RUNNING A FULL TABLE LOAD FROM SOURCE!!! ==> ****;
        SET vTableRebuild = 'Yes';
    ELSE
        TRACE **** Normal incremental data loading ****;
        SET vTableRebuild = 'No';
    END IF;
    
    IF NOT ISNULL(TableNumber('Field_Comparison')) THEN
        DROP TABLE Field_Comparison;
    END IF;

    // ACTUAL DATA LOADING BELOW
    /*  <----------- 2 - Support tables and information  ----------->*/
    // 2a. Check the delta QVD files and folders to get the DateTime Field for that DB table
    IF ALT(QvdCreateTime('$(parQVDTargetFolder)/_Delta/$(parDB_Table)_Max_$(parDateTimeField).qvd'), 0) > 0 AND '$(vTableRebuild)' <> 'Yes' THEN
        Max_$(parDateTimeField):
        LOAD
			//Buffer of 3 days for syncing delays
            (Max_$(parDateTimeField)-3) as Max_$(parDateTimeField)
        FROM [$(parQVDTargetFolder)/_Delta/$(parDB_Table)_Max_$(parDateTimeField).qvd] (QVD);
        
        // 2b. Establish difference between today and last loading date-3 established by VAR above.
        LET vMaxDate = DATE(PEEK('Max_$(parDateTimeField)', 0, 'Max_$(parDateTimeField)'), 'YYYYMMDD');
        DROP TABLE Max_$(parDateTimeField);
    ELSE
        // 2c. This is the DEFAULT value on the first run and will fetch the last 2 years of data from each mentioned table in DB.
        LET vMaxDate = DATE(MAKEDATE(2008,01,01), 'YYYYMMDD');
        TRACE ***** LOADING ALL DATA *****;
    END IF;

    // //On weekends, run last 2 months of data  ----> OPTIONAL/uncomment if desired
    // IF WeekDay(TODAY()) = 'Sat' THEN
    //     LET vMaxDate = NUM(TODAY()) - NUM(ADDMONTHS(MONTHSTART(TODAY()), -1))+1;
    // END IF;
    
    TRACE ***** LOADING DATA FOR GREATER THAN $(vMaxDate) *****;

    //Clean out the WHERE-Clause of single-quotes:
    LET parDB_WHERE_Clause_Clean = REPLACE('$(parDB_WHERE_Clause)', '|', CHR(39));

    /*  <----------- 3 - pl-SQL loading of data from DB  ----------->*/
    // 3a. pl-SQL statement for all new records
	TRACE *** Connecting to database: $(parDB_Connection) ***; 
    TRACE *** Taking data from table: "$(parDB_Owner)"."$(parDB_Table)" ***;
    TRACE *** Incremental on the date-time field $(parDateTimeField) with date value $(vMaxDate) ***;
    TRACE *** Using the WHERE-Clause $(parDB_WHERE_Clause_Clean);

    [$(parDB_Table)]:
    LOAD 
		*,
		NUM(FLOOR($(parDateTimeField))) as [$(parDateTimeField)_Date_NUM_q],
		TIME(FRAC($(parDateTimeField)), 'HH:mm:ss') as [$(parDateTimeField)_Time_q],
	 	DATE(MONTHSTART($(parDateTimeField)), 'YYYYMM') as $(parDateTimeField)_YYYYMM;
    SELECT * FROM "$(parDB_Owner)"."$(parDB_Table)"
    WHERE $(parDateTimeField) >= TO_DATE('$(vMaxDate)', 'YYYYMMDD') AND $(parDateTimeField) <= TO_CHAR(ADD_MONTHS(SYSDATE,-0)) 
    $(parDB_WHERE_Clause_Clean)
    //DESC order of date to be stored in QVD
    ORDER BY $(parDateTimeField) DESC;

	LET parDB_NoofRows = NoofRows('$(parDB_Table)');

    // 3c. Identify the MAX DateTime Field in order to store into a Delta QVD for next run.
    [Max_$(parDateTimeField)]:
    LOAD
        DATE(DAYSTART(MAX($(parDateTimeField))), 'YYYYMMDD') as Max_$(parDateTimeField)
    RESIDENT [$(parDB_Table)];

	LET vScriptEndDB		= NOW();
	LET vScriptDurationDB	= INTERVAL('$(vScriptEndDB)' - '$(vScriptStartDB)', 'HH:mm:ss');

    /*  <---------------------- 4 - Store to QVDs  ---------------------->*/
	//Save the QVD in folder "4_Extract_QVD" in which there will be a sub-folder named after the DB table name
	LET vScriptStartStore		= NOW();

    // 4a. If the DB delta (change-data-capture) load table exists in the Qlik script and there is one record or more
    IF NOT(ISNULL(TableNumber('$(parDB_Table)'))) AND ALT(NoOfRows('$(parDB_Table)'), 0) > 0 THEN

        // 4b. Get the distinct values in the "DateTime Field_YYYYMM" to loop around
        FOR Each FieldValue in FieldValueList('$(parDateTimeField)_YYYYMM')
            DistinctFieldValues: LOAD '$(FieldValue)' as DistinctFieldValues AUTOGENERATE(1);
        NEXT FieldValue;

        // 4c. Loop through the distinct YYYYMM field values in order to generate the YYYYMM QVDs
        FOR i=1 TO NoOfRows('DistinctFieldValues')
            LET vDistinctFieldValues = PEEK('DistinctFieldValues', $(i)-1,'DistinctFieldValues');

            // 4c-1. Check if the current YYYYMM QVD already exists... (or else if not re-building all QVDs)
            IF ALT(QvdCreateTime('$(parQVDTargetFolder)/$(parDB_Table)/$(parDB_Table)_$(vDistinctFieldValues).qvd'),0) > 0 AND  '$(vTableRebuild)' <> 'Yes' THEN
                //... if the YYYYMM exists, load it distinct on the Primary Key ...
                ExistingData: NOCONCATENATE LOAD * FROM [$(parQVDTargetFolder)/$(parDB_Table)/$(parDB_Table)_$(vDistinctFieldValues).qvd] (QVD) WHERE NOT(EXISTS([$(parPrimaryKey)]));
                //... and concatenate the "Delta" loaded from source to this one, before STORING the QVD.
                SET vConcatenate = 'CONCATENATE(ExistingData)';
            ELSE
                //Otherwise, DISALLOW 'auto-concatenation' of the table. 
                SET vConcatenate = 'NOCONCATENATE';
            END IF;
 
            ExistingData: $(vConcatenate) LOAD * RESIDENT [$(parDB_Table)] WHERE DATE($(parDateTimeField)_YYYYMM) = DATE#('$(vDistinctFieldValues)', 'YYYYMM');
            //Now "empty" the vConcatenate variable for next value in loop, just in case.
            SET vConcatenate = '';
            //DROP the YYYYMM field value, as the QVD file name defines the YYYYMM of data, therefore this field is redundant.
            DROP FIELD $(parDateTimeField)_YYYYMM FROM ExistingData;

            //STORE THE DATA INTO THE QVD REVERSE CHRONOLOGICALLY SO THAT IT IS EASY TO PICK OUT THE LAST ("DateTime Field") VALUE FROM A QVD USING "WHERE NOT(EXISTS(Primary_Key))".
            ExistingData_QVD: NOCONCATENATE LOAD * RESIDENT ExistingData ORDER BY $(parDateTimeField) DESC;
            DROP TABLE ExistingData;        
            STORE ExistingData_QVD INTO [$(parQVDTargetFolder)/$(parDB_Table)/$(parDB_Table)_$(vDistinctFieldValues).qvd](qvd);
            DROP TABLE ExistingData_QVD;
        NEXT i;

        // 4d. Drop the support table containing the distinct YYYYMM field values in the currently loaded DB extract.
        DROP TABLE DistinctFieldValues;
        // 4e. Drop the delta loaded DB table from the script.
        DROP TABLE [$(parDB_Table)];

        // 4f. Once latest data QVD is written, then write Max_DateTime Field to file
        STORE [Max_$(parDateTimeField)] INTO [$(parQVDTargetFolder)/_Delta/$(parDB_Table)_Max_$(parDateTimeField).qvd](qvd);
        DROP TABLE [Max_$(parDateTimeField)];

		LET vScriptEndStore			= NOW();
		LET vScriptDurationStore	= INTERVAL('$(vScriptEndStore)' - '$(vScriptStartStore)', 'HH:mm:ss');

		TableInfo:
		LOAD
			'$(parDB_Connection)'			as DB_LIB_Connection,
			'$(parDB_Owner)'				as DB_Owner,
			'$(parDB_Table)'				as DB_Table,
			NUM('$(parDB_NoofRows)', '###,###,###,###') as DB_NoofRows,
			'$(parDB_WHERE_ClauseFinal)'	as DB_WhereClause,
			'$(vScriptDurationDB)'			as Extraction_Duration,
			'$(vScriptStartDB)'				as Extraction_Start,
			'$(vScriptEndDB)'				as Extraction_End,
			'$(vScriptDurationStore)'		as Store_Duration,
			'$(vScriptStartStore)'			as Store_Start,
			'$(vScriptEndStore)'			as Store_End
		AUTOGENERATE(1);
    END IF;

	//Blank-out the VARs for the next run
	LET parDB_Owner = '';
	LET parDB_Table = '';
	LET parDateTimeField = '';
	LET parDB_WHERE_Clause = '';
    LET parDB_WHERE_Clause_Clean = '';
end sub;


// 3) QVDFileNamesList(parQVDTargetFolder,parQVDNamePrefix,parLoadLastNFiles)
/*<------ SUB: Load Last 'N' YYYYMM-suffixed "QVDFileNamesList" QVDs from a folder and into a "QVDFileNamesList" support table ------>*/
/*
EXAMPLE of sub's CALL statement:
CALL QVDFileNamesList('lib://QVDATA/SBI_QlikSense/dev_temp','SBI-Extract-FC_User_Group','1');
_______________________
Rationale:
_______________________
Based on the assumption that you have created a QVD file system that stores data into YYYYMM slices, this script calls for the 
last 'N' slices into a support table that can be used for further purposes.

sub-routine parameters:
parQVDTargetFolder	--> Folder holding the QVDs in question.
parQVDNamePrefix	--> the set file name prefix before the "_YYYYMM" filename suffix.
parLoadLastNFiles	--> Load the last N periods, reverse chronologically.

Author:	Cheenu Janakiram
Date:	12 September 2020
*/
sub QVDFileNamesList(parQVDTargetFolder,parQVDNamePrefix,parLoadLastNFiles)
	FOR EACH File IN FileList('$(parQVDTargetFolder)/$(parQVDNamePrefix)_*.qvd')
		FileList_Temp: LOAD '$(File)' as FileList, QvdCreateTime('$(File)') as FileListDate AUTOGENERATE(1);
	NEXT File;
	QVDFileNamesList:
	NOCONCATENATE FIRST $(parLoadLastNFiles)
	LOAD
		QVDFileNamesList,
		QVDFileNamesListDate,
		NUM(QVDFileNamesListDate) as QVDFileNamesListDateNUM,
		SUBFIELD(SUBFIELD(QVDFileNamesListNUM_Temp, '_', SUBSTRINGCOUNT(QVDFileNamesListNUM_Temp, '_')+1), '.qvd', 1) as QVDFileNamesListNUM
	;
	LOAD 
		FileList as QVDFileNamesList,
		FileListDate as QVDFileNamesListDate,
		SUBFIELD(FileList, '/', SUBSTRINGCOUNT(FileList, '/')+1) as QVDFileNamesListNUM_Temp
	RESIDENT FileList_Temp ORDER BY FileList DESC;
	DROP TABLE FileList_Temp;
end sub;


// 4) QVDFileNamesLoad(parQVDTargetFolder,parQVDNamePrefix,parLoadLastNFiles,parOPTIONALsubName)
/*<------ SUB: Load Last 'N' YYYYMM-suffixed "QVDFileNamesList" QVDs from a folder ------>*/
/*
EXAMPLE of sub's CALL statement:

sub User_Group_Temp
    User_Group_Temp:
    LOAD
        User_Group_ID,
        Extract_Date
    FROM [$(vQVDFileNamesList)] (QVD);
end sub;

CALL QVDFileNamesLoad('lib://QVDATA/SBI_QlikSense/dev_temp','SBI-Extract-FC_User_Group','1','User_Group_Temp');
_______________________
Rationale:
_______________________
Based on the assumption that you have created a QVD file system that stores data into YYYYMM slices, this script calls for the 
last 'N' slices into a support table that can be used for further purposes.
**** N.B. The table of data loaded will be called "QVDFileNamesLoad", unless you call it otherwise in a preceding-sub (look at
explanation of "parOPTIONALsubName" parameter below).

sub-routine parameters:
parQVDTargetFolder	--> Folder holding the QVDs in question.
parQVDNamePrefix	--> the set file name prefix before the "_YYYYMM" filename suffix.
parLoadLastNFiles	--> Load the last N periods, reverse chronologically.
parOPTIONALsubName  --> If you don't want "load *" and want only a restricted amount of fields, create a
                        sub preceding this CALL with the fields called for in the load statement.
                        The "from"  source must be mentioned as "FROM [$(vQVDFileNamesList)] (QVD);".

Author:	Cheenu Janakiram
Date:	25 October 2020
*/
sub QVDFileNamesLoad(parQVDTargetFolder,parQVDNamePrefix,parLoadLastNFiles,parOPTIONALsubName)
    CALL QVDFileNamesList('$(parQVDTargetFolder)','$(parQVDNamePrefix)','$(parLoadLastNFiles)');

    FOR i=1 TO NoofRows('QVDFileNamesList')
        LET vQVDFileNamesList = PEEK('QVDFileNamesList', $(i)-1, 'QVDFileNamesList');
            IF TRIM(LEN('$(parOPTIONALsubName)')) > 0 THEN
                CALL $(parOPTIONALsubName);
            ELSE
                QVDFileNamesLoad: LOAD * FROM [$(vQVDFileNamesList)] (QVD);
            END IF;
    NEXT i;
    DROP TABLE QVDFileNamesList;
end sub;


// 999) QVDCreateYMSlicesFromQVD(parSourceQVDFolder,parSourceQVDFile,parTargetFolder,parDateFieldNameToCreateQVDSlices)
/*<------ SUB: Create YYYYMM QVD Slices from a large QVD (this is a 'temp' sub to get you started on YYYYMM QVD slices ------>*/
/*
EXAMPLE of sub's CALL statement:
CALL QVDCreateYMSlicesFromQVD('lib://QVDATA/SBI_QlikSense','SBI-Extract-FC_User_Group','Extract_Date');
_______________________
Rationale:
_______________________
Based on the assumption that you have created a QVD file system that stores data into YYYYMM slices, this script calls for the 
last 'N' slices into a support table that can be used for further purposes.

sub-routine parameters:
parSourceQVDFolder					--> Folder holding the BIG QVD from which you want to create YYYYMM slices.
parSourceQVDFile					--> The BIG QVD name.
parTargetFolder						--> Root target folder.
parDateFieldNameToCreateQVDSlices	--> The date field in the BIG QVD upon which you want to create the YYYYMM QVD slices.

Author:	Cheenu Janakiram
Date:	12 September 2020
*/
sub QVDCreateYMSlicesFromQVD(parSourceQVDFolder,parSourceQVDFile,parTargetFolder,parDateFieldNameToCreateQVDSlices)

	Temp01: LOAD * FROM [$(parSourceQVDFolder)/$(parSourceQVDFile).qvd] (QVD);

	Temp02: NOCONCATENATE LOAD *, DATE(MONTHSTART([$(parDateFieldNameToCreateQVDSlices)]), 'YYYYMM') as [$(parDateFieldNameToCreateQVDSlices)_YYYYMM] RESIDENT Temp01;

	DROP TABLE Temp01;

	FOR Each vFieldValue in FieldValueList('$(parDateFieldNameToCreateQVDSlices)_YYYYMM')
		FieldValues: LOAD '$(vFieldValue)' as FieldValues AUTOGENERATE(1);
	NEXT vFieldValue;

	FOR i=1 TO NoOfRows('FieldValues')
		LET vFilterValue = PEEK('FieldValues', $(i)-1,'FieldValues');
    	TRACE Loading and Storing "$(parDateFieldNameToCreateQVDSlices)" Data for $(vFilterValue);    
    	TempFiltered: NOCONCATENATE LOAD * RESIDENT Temp02 WHERE [$(parDateFieldNameToCreateQVDSlices)_YYYYMM] = DATE#('$(vFilterValue)', 'YYYYMM');
		//Drop Support field before 
		DROP FIELD [$(parDateFieldNameToCreateQVDSlices)_YYYYMM] FROM TempFiltered;
    	STORE TempFiltered INTO [$(parTargetFolder)/$(parSourceQVDFile)/$(parSourceQVDFile)_$(vFilterValue).qvd] (QVD);
    	DROP TABLE TempFiltered;
	NEXT i;
		//STORE NULLS if they EXIST. The QVD is named "-NULLS" as opposed "_NULLS" in order NOT to cause confusion when using the
		// sub-routine above "QVDFileNamesList".
		TempFiltered_NULLS: NOCONCATENATE LOAD * RESIDENT Temp02 WHERE ISNULL([$(parDateFieldNameToCreateQVDSlices)_YYYYMM]);
		DROP FIELD [$(parDateFieldNameToCreateQVDSlices)_YYYYMM] FROM TempFiltered_NULLS;
    	STORE TempFiltered_NULLS INTO [$(parTargetFolder)/$(parSourceQVDFile)/$(parSourceQVDFile)-NULLS.qvd] (QVD);

	DROP TABLE Temp02;
end sub;