$(Must_Include=lib://Folder_Qlik_Sense_PRD/1_Include/1_Configuration/Orpea_Couleurs.qvs);

SET vRunQVDsNow = 'No';
//SET vRunQVDsNow = 'Yes';

//	4. Do you wantr to run the script log analysis
SET vRunLogAnalysis = 'Yes';
//SET vRunLogAnalysis = 'No';


//	1. Insert the LIB connection to the folder where you want to write/store the QMC tables as QVDs:
SET vQMC_QVD_Store = 'lib://Folder_Qlik_Sense_PRD/6_Transform_QVD/Operations Monitor';
//	2. Insert QlikSense server address here to be able to link back to apps from URL in a front-end table:
SET vQlikSenseServer = 'https://frdv-qliapp-001.orpea.net';

//	3. If you want to manually run and update the QVD info, switch VAR to 'Yes' OR Run it at each reload  --> ELSE...
//... ELSE Run it at specific hours of the day, when this app is set to rerun multiple times a day
// This will minimise run time when QVDs are not changing (e.g. after a long ETL process).
LET vQVDInfoUpdate = MATCH(HOUR(NOW()), '08', '15');

//Set script log folder
SET vScriptLogFolder = 'lib://Folder_Data_Share_PRD/ScriptAnalyser';

//Adjust for system clock and task times by "fraction of a day"
//LET vSystemClockAdjust = 1/8;

TRACE ******************* START of Mapping *******************;

App_Name_Map:
MAPPING LOAD 
	 ObjectId, 
     [App Name] as [Task App Name]
FROM [$(vQMC_QVD_Store)/AppName.qvd] (QVD);


TRACE ************* END of Mapping *************;

//Only run QVD Info portion if time is set in "01. Main & CONFIG" tab >> "vQVDInfoUpdate".
IF ($(vQVDInfoUpdate) > 0) OR ('$(vRunQVDsNow)' = 'Yes') THEN

	LET vQVDInfoLastRefresh =  DATE(ConvertToLocalTime(NOW() +  1/6, 'Paris'), 'DD-MMM-YYYY HH:mm:ss');

    TRACE ************* START of List of QVD Folders *************;

    LET vFullPathToFolders = ;
    LET vFullPathToFolder = ;

    Full_Paths_To_Folder:
    LOAD * INLINE [
        Full_Paths_To_Folder
        lib://Folder_Qlik_Sense_PRD
    ];
    
    FullPathToFolders: 
    LOAD 
        CHR(34) & Concat(Full_Paths_To_Folder, CHR(34) & ', ' & CHR(34)) & CHR(34) as FullPathToFolders
    RESIDENT Full_Paths_To_Folder;

    LET vFullPathToFolders = PEEK('FullPathToFolders', 0, 'FullPathToFolders');
    DROP TABLE FullPathToFolders;

    FOR z=1 TO NoOfRows('Full_Paths_To_Folder')
        LET vFullPathToFolder = PEEK('Full_Paths_To_Folder', $(z)-1, 'Full_Paths_To_Folder');

        //Generate Sub
        sub ScanFolder(Root)
            FOR EACH FileExtension IN 'qvd'
                FOR EACH FoundFile IN FILELIST(Root & '/*.' & FileExtension)
                    FileList:
                    LOAD
                        '$(FoundFile)' as Full_Path_to_Source_File,
                        ROUND((FileSize('$(FoundFile)') / 1024) / 1024, 0.01)  as QVD_FileSize_MB,
                        QvdNoOfRecords('$(FoundFile)') as NoOfRecords_QVD,
                        QvdNoOfFields('$(FoundFile)') as NoOfFields
                    AUTOGENERATE(1);
                NEXT FoundFile;
            NEXT FileExtension;

            FOR EACH SubDirectory IN DIRLIST(Root & '/*')
                CALL ScanFolder(SubDirectory)
            NEXT SubDirectory;
        end sub;

        //Call sub
        Call ScanFolder('[$(vFullPathToFolder)]') ;

        FOR i=1 TO NoOfRows('FileList')
            LET vFull_Path_to_Source_File = PEEK('Full_Path_to_Source_File', $(i)-1, 'FileList');

            QvdFieldHeader:
            LOAD
                '$(vFull_Path_to_Source_File)' as Full_Path_to_Source_File,
                Date(NOW(), 'DD-MMM-YYYY') as Date_QVDFieldHeaderScan,
                "FieldName",
                BitOffset,
                BitWidth,
                Bias,
                NoOfSymbols,
                Offset,
                "Length",
                "NumberFormat/Type",
                "NumberFormat/nDec",
                "NumberFormat/UseThou",
                "NumberFormat/Fmt",
                "NumberFormat/Dec",
                "NumberFormat/Thou",
                1 as Field_Counter
            FROM "$(vFull_Path_to_Source_File)"
            (XmlSimple, table is [QvdTableHeader/Fields/QvdFieldHeader]);

            LET vFieldCount = NoOfRows('QvdFieldHeader');
            
			QvdTableHeader_Temp:
            LOAD
                '$(vFull_Path_to_Source_File)' as Full_Path_to_Source_File,
                SubField(SubField('$(vFull_Path_to_Source_File)', '/', SubStringCount('$(vFull_Path_to_Source_File)', '/')+1), '.qvd', 1) as QVD_Name,
                QvBuildNo,
                CreatorDoc,
                ApplyMap('App_Name_Map', CreatorDoc, CreatorDoc) as [Task App Name],
                //ApplyMap('Stream_Name_Map', CreatorDoc, CreatorDoc) as [Stream Name], 
                IF(RIGHT(CreatorDoc, 4) = '.qvw', 'QlikView', 'QlikSense') as Creator_Enviro,
                CreateUtcTime,
                SourceFileSize,
                "TableName",
                NoOfRecords,
                $(vFieldCount) as NoofFields
            FROM "$(vFull_Path_to_Source_File)"
            (XmlSimple, table is QvdTableHeader);    
        NEXT i;

    NEXT z;

    DROP TABLE Full_Paths_To_Folder;

    //Add calendar values/fields
    QvdTableHeader:
    LOAD
        *,
        Date(DayStart(CreateUtcTime), 'DD-MMM-YYYY') as Date,
        Month(CreateUtcTime) as Month,
        Year(CreateUtcTime) as Year,
        Hour(CreateUtcTime) as Hour,
        DATE(NOW(), 'DD-MMM-YYYY HH:mm') as DateTime_QVDTableHeaderScan
    RESIDENT QvdTableHeader_Temp;

    DROP TABLE QvdTableHeader_Temp;

    STORE FileList INTO [$(vQMC_QVD_Store)/FileList.qvd] (QVD);
    STORE QvdTableHeader INTO [$(vQMC_QVD_Store)/QvdTableHeader.qvd] (QVD);
    STORE QvdFieldHeader INTO [$(vQMC_QVD_Store)/QvdFieldHeader.qvd] (QVD);

//Archives for time comparison  --> Table Header
    IF ALT(QvdCreateTime('$(vQMC_QVD_Store)/QvdTableHeader_Archive.qvd'), 0) > 0 THEN    
    	QvdTableHeader_Archive: NOCONCATENATE LOAD * FROM [$(vQMC_QVD_Store)/QvdTableHeader_Archive.qvd] (QVD);
        CONCATENATE (QvdTableHeader_Archive) LOAD * RESIDENT QvdTableHeader;
        STORE QvdTableHeader_Archive INTO [$(vQMC_QVD_Store)/QvdTableHeader_Archive.qvd] (QVD);
        DROP TABLE QvdTableHeader_Archive;
	ELSE
    	//Create on first run
    	STORE QvdTableHeader INTO [$(vQMC_QVD_Store)/QvdTableHeader_Archive.qvd] (QVD);
	END IF;
ELSE
	FileList: LOAD * FROM [$(vQMC_QVD_Store)/FileList.qvd] (QVD);
	QvdTableHeader: LOAD * FROM [$(vQMC_QVD_Store)/QvdTableHeader.qvd] (QVD);
	QvdFieldHeader: LOAD * FROM [$(vQMC_QVD_Store)/QvdFieldHeader.qvd] (QVD);
END IF;

TRACE ************* END of List of QVD Folders: Folder Loop tab *************;

TRACE ************* START of QMC Data *************;

App_Info_Time:
LOAD
	*,
	[App Last Reload Time] & '_' & [Task App Name] as %FK01
;
LOAD 
	 ApplyMap('App_Name_Map', ObjectId, NULL()) as [Task App Name],
     Date(([App Last Reload Time]), 'YYYY-MM-DD HH:mm:ss') as [App Last Reload Time]
FROM [$(vQMC_QVD_Store)/App.qvd] (QVD);

App_Info:
LOAD 
	 Date([App Last Reload Time], 'YYYY-MM-DD HH:mm:ss') & '_' & ApplyMap('App_Name_Map', ObjectId, NULL()) as %FK01,
     [App Published], 
     [App File Size], 
     [App Availability Status]
FROM [$(vQMC_QVD_Store)/App.qvd] (QVD)
WHERE EXISTS(%FK01, Date([App Last Reload Time], 'YYYY-MM-DD HH:mm:ss') & '_' & ApplyMap('App_Name_Map', ObjectId, NULL()));


Task_Info:
LOAD 
	 TaskId,
     [Task Manually Triggered], 
     [Task Type], 
     [Task Next Execution], 
     [Task App Name]
FROM [$(vQMC_QVD_Store)/Task.qvd] (QVD)
WHERE EXISTS([Task App Name]);


Task_Name:
LOAD 
	 TaskId, 
     [Task Name],
	IF(WILDMATCH([Task Name], '*(e)*'), 'Extract',
    	IF(WILDMATCH([Task Name], '*(t)*'), 'Transform', 'Other')) as [Task Group]
FROM [$(vQMC_QVD_Store)/TaskName.qvd] (QVD)
WHERE EXISTS(TaskId);


Temp:
LOAD
	_proxySessionPackage,
	TaskId
FROM [$(vQMC_QVD_Store)/LogContent.qvd] (QVD);

TaskId_Map:
MAPPING LOAD 
	_proxySessionPackage as X1,
	TaskId as Y1
RESIDENT Temp;

DROP TABLE Temp;

Reload_Summary:
LOAD
	*,
	[Reload Finish]  & '_' & TaskId as %FK02,
    Time([Reload Finish], 'HH:mm:ss') as [Reload Finish Time];
LOAD 
	ApplyMap('TaskId_Map', _proxySessionPackage) as TaskId,
     Date(([Reload Finish]), 'YYYY-MM-DD HH:mm:ss') as [Reload Finish]
FROM [$(vQMC_QVD_Store)/ReloadSummary.qvd] (QVD)
WHERE EXISTS(TaskId, ApplyMap('TaskId_Map', _proxySessionPackage));

Reload_Summary_Info:
LOAD
	*,
	AutoNumber(
    	IF(Hour([Reload Start Time]) >= 19, NUM(DayStart(Date([Reload Start], 'YYYY-MM-DD'))),
        NUM(DayStart(Date([Reload Start], 'YYYY-MM-DD'))) -1)
    , 27) as TaskSortOrder;
LOAD
	Date([Reload Finish], 'YYYY-MM-DD HH:mm:ss') & '_' & ApplyMap('TaskId_Map', _proxySessionPackage) as %FK02,
	[Reload Start],
    Date(floor([Reload Start]), 'DD-MMM-YYYY') as [Reload Start Date],
    Time([Reload Start], 'HH:mm:ss') as [Reload Start Time],
	[Reload Status],
    PICK(MATCH([Reload Status], 'Success', 'Failed', 'Aborted'), 1,2,3) as ReloadStatusNUM,
    [Reload Duration]
FROM [$(vQMC_QVD_Store)/ReloadSummary.qvd] (QVD)
WHERE EXISTS(%FK02, Date([Reload Finish], 'YYYY-MM-DD HH:mm:ss') & '_' & ApplyMap('TaskId_Map', _proxySessionPackage));

TRACE ************* END of QMC Data *************;

/*
*********** INSTRUCTIONS ***********
TABS 05a* to 05f* are to run extracts on log files.

If you don't have access to the server logs folder but to the QMC,
copy/paste the list of log files from QMC to local drive and run the scripts
tabs "a" to "f" to generate a "ScriptLogContent.qvd" to load from in 05g.
*/
FOR EACH file IN FILELIST('$(vScriptLogFolder)/*.log')
	LogScriptDateTimeNUM: LOAD NUM(FileTime('$(file)')) as LogScriptDateTimeNUM AUTOGENERATE(1);
NEXT file;

DateTime: NOCONCATENATE LOAD * RESIDENT LogScriptDateTimeNUM WHERE LogScriptDateTimeNUM >= '$(vScriptLogLastRun)';
DROP TABLE LogScriptDateTimeNUM;

IF ALT(NoOfRows('LogScriptDateTimeNUM'), 0) > 0 THEN
	SET vRunLogAnalysis = 'Yes';
    LET vScriptLogDateTime = WEEKDAY(PEEK('LogScriptDateTimeNUM', 0, 'LogScriptDateTimeNUM')) & ', ' & DATE(PEEK('LogScriptDateTimeNUM', 0, 'LogScriptDateTimeNUM'), 'DD-MMM-YYYY HH:mm:ss');
    DROP TABLE LogScriptDateTimeNUM;
END IF;

//IF clause meant for the whole of tabs until "Script Log Analysis --> END PREP"
IF '$(vRunLogAnalysis)' = 'Yes' THEN

      GUID_Map:
      MAPPING LOAD DISTINCT 
           [App Name], 
           AppId as GUID
      FROM [$(vQMC_QVD_Store)/AppName.qvd] (qvd);

      Task_AppMap_Temp:
      NOCONCATENATE
      LOAD TaskId, 
           [Task Name]
      FROM [$(vQMC_QVD_Store)/TaskName.qvd] (qvd);

      LEFT JOIN(Task_AppMap_Temp)
      LOAD TaskId, 
           [Task App Name]
      FROM [$(vQMC_QVD_Store)/Task.qvd] (qvd);

      App_Map:
      MAPPING LOAD
          [Task Name] as X1,
          [Task App Name] as X2
      RESIDENT Task_AppMap_Temp;

      DROP TABLE Task_AppMap_Temp;

      FOR EACH file in FileList('$(vScriptLogFolder)/*.log')
              LoadingFromQVD_Temp:
              FIRST 1
              LOAD @1 as TimeStamp, 
                   '0001' as OriginalLineIndex,
                   TRIM(@3 & ' ' & @4 & ' ' & @5 & ' ' & @6 & ' ' & @7 & ' ' & @8) as FullLine,
                   '$(file)' as LogFile
              FROM [$(file)]
              (txt, utf8, no labels, delimiter is ' ', msq);
      NEXT file;

      FOR EACH file in FileList('$(vScriptLogFolder)/*.log')
              LoadingFromQVD_Temp:
              LOAD @1 as TimeStamp, 
                   '9999' as OriginalLineIndex,
                   TRIM(@3 & ' ' & @4 & ' ' & @5 & ' ' & @6 & ' ' & @7 & ' ' & @8) as FullLine,
                   '$(file)' as LogFile
              FROM [$(file)]
              (txt, utf8, no labels, delimiter is ' ', msq)
              WHERE WILDMATCH(TRIM(@3 & ' ' & @4 & ' ' & @5 & ' ' & @6 & ' ' & @7 & ' ' & @8), '*execution finished*') <>  0;
      NEXT file;


      FOR EACH file in FileList('$(vScriptLogFolder)/*.log')

              LoadingFromQVD_Temp01:
              LOAD *, IF(LEN(TRIM(LineIndexTemp05)) > 0, LineIndexTemp05, PEEK(LineIndexTemp05)) as LineIndexTemp06;
              LOAD *, IF(LEN(TRIM(LineIndexTemp04)) > 0, LineIndexTemp04, PEEK(LineIndexTemp04)) as LineIndexTemp05;
              LOAD *, IF(LEN(TRIM(LineIndexTemp03)) > 0, LineIndexTemp03, PEEK(LineIndexTemp03)) as LineIndexTemp04;
              LOAD *,	IF(LEN(TRIM(LineIndexTemp02)) > 0, LineIndexTemp02, PEEK(LineIndexTemp02)) as LineIndexTemp03;
              LOAD *, IF(LEN(TRIM(LineIndexTemp01)) > 0, LineIndexTemp01, PEEK(LineIndexTemp01)) as LineIndexTemp02;
              LOAD *, IF(LEN(TRIM(OriginalLineIndex)) > 0, OriginalLineIndex, PEEK(OriginalLineIndex)) as LineIndexTemp01
              WHERE WILDMATCH(FullLine, 'from *', 'resident *', '* lines',  'call *',  'store *') <> 0
              AND WILDMATCH(FullLine, '*1 fields*', '*1 lines*') = 0
              ;
              LOAD @1 as TimeStamp, 
                   @2 as OriginalLineIndex,
                   TRIM(@3 & ' ' & @4 & ' ' & @5 & ' ' & @6 & ' ' & @7 & ' ' & @8) as FullLine,
                   '$(file)' as LogFile
              FROM [$(file)]
              (txt, utf8, no labels, delimiter is ' ', msq);
      NEXT file;


      CONCATENATE (LoadingFromQVD_Temp) LOAD * RESIDENT LoadingFromQVD_Temp01;
      DROP TABLE LoadingFromQVD_Temp01;

    FOR EACH file in FileList('$(vScriptLogFolder)/*.log')
            LoadingFromQVD_Temp_WHEREClauses:
            LOAD 
                *, 
                RIGHT('0000' & (TEXT(WHERE_OriginalLineIndex - 1)), 4) as WHERE_LineIndex_JOIN
            WHERE WILDMATCH(WHERE_FullLine, 'where *') <> 0
            ;
            LOAD @1 as WHERE_TimeStamp, 
                 @2 as WHERE_OriginalLineIndex,
                 TRIM(@3 & ' ' & @4 & ' ' & @5 & ' ' & @6 & ' ' & @7 & ' ' & @8) as WHERE_FullLine,
                 '$(file)' as LogFile
            FROM [$(file)]
            (txt, utf8, no labels, delimiter is ' ', msq);
    NEXT file;


    /*
    List below all the type of key terms that this log analyser should look for in logs.
    */

    Script_KeyWords_Categorisation_List:
    LOAD *, RowNo() as RowNumber INLINE [
        KeyWords_SearchString, Categorisation
        store*, STORE
        call mappingfrom*, CALL SUB - Mapping
        from*lib://*.qvd*, FROM QVD
        from*.xls*, FROM XLS
        from*, FROM DB
        resident *, RESIDENT
        call *(*, CALL SUB - Filtering
        * lines, Rows Loaded
        * fields, Fields Loaded
        *, OTHER
    ];


    WildMatchString01:
    LOAD
        CHR(39) & CONCAT(KeyWords_SearchString, CHR(39) & ',' & CHR(39),RowNumber) & CHR(39) as WildMatchString01
    RESIDENT Script_KeyWords_Categorisation_List;

    LET vWildMatchString01 = PEEK('WildMatchString01', 0, 'WildMatchString01');
    DROP TABLE WildMatchString01;

    Categorisation:
    LOAD
        CHR(39) & CONCAT(Categorisation, CHR(39) & ',' & CHR(39),RowNumber) & CHR(39) as Categorisation
    RESIDENT Script_KeyWords_Categorisation_List;

    LET vCategorisation = PEEK('Categorisation', 0, 'Categorisation');
    DROP TABLE Categorisation;


    DROP TABLE Script_KeyWords_Categorisation_List;


    //checking for WHERE clauses in script
    Check01:
    LOAD 
        LogFile & '_' & WHERE_LineIndex_JOIN as Check01
    RESIDENT LoadingFromQVD_Temp_WHEREClauses;
    DROP TABLE LoadingFromQVD_Temp_WHEREClauses;


    LoadingFromQVD:
    LOAD
        * ,
        ApplyMap('GUID_Map', AppName, null()) as GUID,
        AppName as [Task App Name]
    ;
    LOAD 
        *, 
        ApplyMap('App_Map', ScriptName) as AppName,
        IF(QVD_Interaction = 'FROM QVD',
            SUBFIELD(SUBFIELD(SUBFIELD(REPLACE(FullLine, '\', '/'), 'FROM ', 2), '[', 2), ']', 1),
            IF(WILDMATCH(QVD_Interaction, 'CALL SUB*') <> 0,
                    SUBFIELD(REPLACE(FullLine, '\', '/'), CHR(39), 2) & '/' & SUBFIELD(REPLACE(FullLine, '\', '/'), CHR(39), 4) & '.qvd' )
        ) as QVD_FilePath,
            IF(QVD_Interaction = 'Rows Loaded', KEEPCHAR(FullLine, '1234567890')) as RowsLoaded
    ;
    LOAD
        FullLine,
        LogFile,
        TimeStamp,
        IF(WILDMATCH(FullLine, '*execution started*') <> 0, 0001,
            IF(WILDMATCH(FullLine, '*execution finished*') <> 0, 9999,
                LineIndexTemp06)) as LineIndex,
        SUBFIELD(SUBFIELD(LogFile, '/', SubStringCount(LogFile, '/')+1), '.log', 1) as ScriptName,
            PICK(WILDMATCH(FullLine, $(vWildMatchString01)), $(vCategorisation)) as QVD_Interaction
    RESIDENT LoadingFromQVD_Temp
    ;
    DROP TABLE LoadingFromQVD_Temp;

    ScriptLogContent_Temp01:
    LOAD * WHERE NOT(ISNULL(AppName));
    LOAD
        *,
        IF(EXISTS(Check01, JOIN_KEY), 'Y') as WHERE_Clause
    ;
    LOAD
        TimeStamp,
        FullLine,
        LogFile,
        LineIndex,
        ScriptName,
        QVD_Interaction,
        AppName,
        IF(QVD_FilePath = 'lib://.qvd', NULL(), QVD_FilePath) as QVD_FilePath,
        GUID,
        LogFile & '_' & LineIndex as JOIN_KEY
    RESIDENT LoadingFromQVD
    WHERE ISNULL(RowsLoaded);

    DROP TABLE Check01;

    LEFT JOIN(ScriptLogContent_Temp01)
    LOAD
        LogFile & '_' & LineIndex as JOIN_KEY,
        SUM(RowsLoaded) as TotalRowsLoaded,
        COUNT(RowsLoaded) as NumberOfLoads
    RESIDENT LoadingFromQVD
    WHERE NOT(ISNULL(RowsLoaded))
    GROUP BY LogFile & '_' & LineIndex;

    DROP TABLE LoadingFromQVD;

    DROP FIELD JOIN_KEY;

    ScriptLogContent_Temp02: NOCONCATENATE LOAD * RESIDENT ScriptLogContent_Temp01 ORDER BY LogFile ASC, TimeStamp ASC, LineIndex ASC;
    DROP TABLE ScriptLogContent_Temp01;

    LEFT JOIN(ScriptLogContent_Temp02)
    LOAD
        LogFile,
        PREVIOUS(TimeStamp) as TimeStamp,
        PREVIOUS(LineIndex) as LineIndex,
        INTERVAL(NUM(TimeStamp) - PREVIOUS(NUM(TimeStamp)), 'HH:mm:ss') as ScriptPortion_RunTime
    RESIDENT ScriptLogContent_Temp02;

    ScriptLogContent: NOCONCATENATE LOAD * RESIDENT ScriptLogContent_Temp02 WHERE LineIndex <> 9999;
    DROP TABLE ScriptLogContent_Temp02;

    STORE ScriptLogContent INTO [$(vQMC_QVD_Store)/ScriptLogContent.qvd] (QVD);
    DROP TABLE ScriptLogContent;

//END IF from tab  "Script Log Analysis --> PREP"
//Record last run time to check on next run if there have been new script logs added
    LET vScriptLogLastRun = NUM(NOW());
END IF;


TRACE ************* START of Dependency *************;

DependencyQVDtoTaskCreator_Map:
MAPPING LOAD
	Full_Path_to_Source_File,
	[Task App Name]
RESIDENT QvdTableHeader;

DependencyQVDNoOfRecords_Map:
MAPPING LOAD
	Full_Path_to_Source_File,
	NoOfRecords
RESIDENT QvdTableHeader;

//Dependency mapping
QVD_Dependency:
LOAD
	*,
    NUM(ROUND((Dependency_TotalRowsLoaded - Dependency_QVDNoOfRecords) / Dependency_QVDNoOfRecords, '0.001'), '###.#%') as Dependency_QVD_Efficiency
;
LOAD
	QVD_Interaction as Dependency_QVD_Interaction,
	FullLine as Dependency_FullLine,
	LogFile as Dependency_LogFile,
	WHERE_Clause as Dependency_WHERE_Clause,
    NUM(TotalRowsLoaded,  '###,###,###,###') as Dependency_TotalRowsLoaded,
    NumberOfLoads as Dependency_NumberOfLoads,
    DUAL(DATE(TimeStamp, 'DD-MMM-YYYY HH:mm:ss'), NUM(TimeStamp)) as Dependency_TimeStamp,
    LineIndex as Dependency_LineIndex,
    ScriptPortion_RunTime as Dependency_ScriptPortion_RunTime,
    SUBFIELD(REPLACE(QVD_FilePath, '\', '/'), '/', SUBSTRINGCOUNT(REPLACE(QVD_FilePath, '\', '/'), '/')+1) as Dependency_QVD_UsedInScriptAppName,
    QVD_FilePath as Dependency_QVD_FilePath,
    NUM(APPLYMAP('DependencyQVDNoOfRecords_Map', REPLACE(QVD_FilePath, '\', '/')),  '###,###,###,###') as Dependency_QVDNoOfRecords,
    IF(WILDMATCH(QVD_Interaction, 'FROM*', 'CALL SUB*'), ApplyMap('DependencyQVDtoTaskCreator_Map', REPLACE(QVD_FilePath, '\', '/'))) as Dependency_QVD_Origin,
	ScriptName as Dependency_ScriptName,
	AppName as [Task App Name]
FROM [$(vQMC_QVD_Store)/ScriptLogContent.qvd] (QVD);

TRACE ************* END of Dependency *************;